{
  "openapi": "3.1.0",
  "info": {
    "title": "OIF Aggregator API",
    "description": "Open Intents Framework (OIF) Aggregator provides a unified API for cross-chain transaction aggregation. This service connects to multiple solvers to find the best execution paths for user intents across different blockchain networks.",
    "contact": {
      "name": "OIF Team",
      "url": "https://github.com/openintentsframework/"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/openintentsframework/oif-aggregator/blob/main/LICENSE"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "GET /health - Comprehensive health check with detailed status",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Service healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Submit a new order\nPOST /v1/orders - Submit an order",
        "operationId": "post_orders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get order status by ID\nGET /v1/orders/:id - Get order details by ID",
        "operationId": "get_order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/quotes": {
      "post": {
        "tags": [
          "quotes"
        ],
        "summary": "Get quotes for a swap request using standard OIF format\nPOST /v1/quotes - Get quotes",
        "operationId": "post_quotes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Quotes aggregated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/solvers": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "GET /v1/solvers - List all solvers",
        "operationId": "get_solvers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (1-based)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 1
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Items per page (1-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "List of solvers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolversResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/solvers/{id}": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "GET /v1/solvers/{id} - Get solver by id",
        "operationId": "get_solver_by_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Solver ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solver details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolverResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AggregationMetadata": {
        "type": "object",
        "description": "Metadata collected during quote aggregation",
        "required": [
          "totalDurationMs",
          "solverTimeoutMs",
          "globalTimeoutMs",
          "earlyTermination",
          "totalSolversAvailable",
          "solversQueried",
          "solversRespondedSuccess",
          "solversRespondedError",
          "solversTimedOut",
          "minQuotesRequired",
          "solverSelectionMode"
        ],
        "properties": {
          "earlyTermination": {
            "type": "boolean",
            "description": "Whether early termination occurred (min_quotes satisfied)"
          },
          "globalTimeoutMs": {
            "type": "integer",
            "format": "int64",
            "description": "Global timeout used in milliseconds",
            "minimum": 0
          },
          "minQuotesRequired": {
            "type": "integer",
            "description": "Minimum quotes required from solver options",
            "minimum": 0
          },
          "solverSelectionMode": {
            "$ref": "#/components/schemas/SolverSelection",
            "description": "Solver selection strategy used"
          },
          "solverTimeoutMs": {
            "type": "integer",
            "format": "int64",
            "description": "Per-solver timeout used in milliseconds",
            "minimum": 0
          },
          "solversQueried": {
            "type": "integer",
            "description": "Number of solvers actually queried",
            "minimum": 0
          },
          "solversRespondedError": {
            "type": "integer",
            "description": "Number of solvers that returned errors",
            "minimum": 0
          },
          "solversRespondedSuccess": {
            "type": "integer",
            "description": "Number of solvers that responded successfully",
            "minimum": 0
          },
          "solversTimedOut": {
            "type": "integer",
            "description": "Number of solvers that timed out",
            "minimum": 0
          },
          "totalDurationMs": {
            "type": "integer",
            "format": "int64",
            "description": "Total time spent on aggregation in milliseconds",
            "minimum": 0
          },
          "totalSolversAvailable": {
            "type": "integer",
            "description": "Total solvers registered in system",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "Asset": {
        "type": "object",
        "description": "Supported blockchain asset/token",
        "required": [
          "address",
          "symbol",
          "name",
          "decimals",
          "chain_id"
        ],
        "properties": {
          "address": {
            "type": "string",
            "description": "Contract address (use \"0x0\" for native tokens)"
          },
          "chain_id": {
            "type": "integer",
            "format": "int64",
            "description": "Chain ID where this asset exists",
            "minimum": 0
          },
          "decimals": {
            "type": "integer",
            "format": "int32",
            "description": "Number of decimal places",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "Human-readable name (e.g., \"Ethereum\", \"USD Coin\")"
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol (e.g., \"ETH\", \"USDC\", \"WBTC\")"
          }
        }
      },
      "AssetAmount": {
        "type": "object",
        "description": "Asset amount representation using ERC-7930 interoperable address format.",
        "required": [
          "asset",
          "amount"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/U256",
            "description": "Amount as a big integer"
          },
          "asset": {
            "$ref": "#/components/schemas/InteropAddress",
            "description": "Asset address in ERC-7930 interoperable format"
          }
        },
        "additionalProperties": false
      },
      "AssetRouteResponse": {
        "type": "object",
        "description": "API response format for asset routes with separate chain ID and address fields\n\nThis provides a more readable format for API consumers compared to the\ninternal InteropAddress format used in the domain model.",
        "required": [
          "originChainId",
          "originTokenAddress",
          "destinationChainId",
          "destinationTokenAddress"
        ],
        "properties": {
          "destinationChainId": {
            "type": "integer",
            "format": "int64",
            "description": "Destination chain ID",
            "minimum": 0
          },
          "destinationTokenAddress": {
            "type": "string",
            "description": "Destination token contract address"
          },
          "destinationTokenSymbol": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional destination token symbol for readability (e.g., \"WETH\", \"USDC\")"
          },
          "metadata": {
            "description": "Optional route-specific metadata (fees, limits, execution time, etc.)"
          },
          "originChainId": {
            "type": "integer",
            "format": "int64",
            "description": "Origin chain ID",
            "minimum": 0
          },
          "originTokenAddress": {
            "type": "string",
            "description": "Origin token contract address"
          },
          "originTokenSymbol": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional origin token symbol for readability (e.g., \"WETH\", \"USDC\")"
          }
        },
        "example": {
          "destinationChainId": 10,
          "destinationTokenAddress": "0x4200000000000000000000000000000000000006",
          "destinationTokenSymbol": "WETH",
          "metadata": {
            "estimatedFee": "0.001",
            "estimatedTime": 120,
            "isNative": false,
            "source": "across-api"
          },
          "originChainId": 1,
          "originTokenAddress": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "originTokenSymbol": "WETH"
        }
      },
      "AvailableInput": {
        "type": "object",
        "description": "Available input with lock information and user",
        "required": [
          "user",
          "asset",
          "amount"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/U256",
            "description": "Amount as a big integer"
          },
          "asset": {
            "$ref": "#/components/schemas/InteropAddress",
            "description": "Asset address in ERC-7930 interoperable format"
          },
          "lock": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Lock",
                "description": "Lock information if asset is already locked"
              }
            ]
          },
          "user": {
            "$ref": "#/components/schemas/InteropAddress",
            "description": "User address in ERC-7930 interoperable format"
          }
        },
        "additionalProperties": false
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Error response format shared by handlers",
        "required": [
          "error",
          "message",
          "timestamp"
        ],
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "description": "Comprehensive health response",
        "required": [
          "status",
          "version",
          "solvers",
          "storage"
        ],
        "properties": {
          "solvers": {
            "$ref": "#/components/schemas/SolverStats"
          },
          "status": {
            "type": "string"
          },
          "storage": {
            "$ref": "#/components/schemas/StorageHealthInfo"
          },
          "version": {
            "type": "string"
          }
        },
        "example": {
          "solvers": {
            "active": 2,
            "healthDetails": {
              "down-solver": false,
              "example-solver": true,
              "uniswap-solver": true
            },
            "healthy": 2,
            "inactive": 1,
            "total": 3,
            "unhealthy": 1
          },
          "status": "healthy",
          "storage": {
            "backend": "memory",
            "healthy": true
          },
          "version": "0.1.0"
        }
      },
      "InteropAddress": {
        "type": "object",
        "description": "ERC-7930 Interoperable Address",
        "required": [
          "version",
          "chain_type",
          "chain_reference",
          "address"
        ],
        "properties": {
          "address": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          "chain_reference": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          "chain_type": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "Lock": {
        "type": "object",
        "description": "Lock information for inputs that are already locked",
        "required": [
          "kind"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/LockKind",
            "description": "Type of lock mechanism"
          },
          "params": {
            "description": "Lock-specific parameters"
          }
        }
      },
      "LockKind": {
        "type": "string",
        "description": "Supported lock mechanisms",
        "enum": [
          "the-compact"
        ]
      },
      "OrderRequest": {
        "type": "object",
        "description": "API request body for submitting orders",
        "required": [
          "quoteResponse",
          "sponsor",
          "signature",
          "order"
        ],
        "properties": {
          "order": {
            "type": "string",
            "description": "Order data"
          },
          "quoteResponse": {
            "$ref": "#/components/schemas/QuoteResponse",
            "description": "Quote data"
          },
          "signature": {
            "type": "string",
            "description": "User's signature for authorization"
          },
          "sponsor": {
            "type": "string",
            "description": "User's wallet address"
          }
        },
        "additionalProperties": false,
        "example": {
          "order": "0xfedcba0987654321...",
          "quoteResponse": {
            "details": {
              "requestedOutputs": [
                {
                  "amount": "1000000000000000000",
                  "asset": "0x01000002147a6a5FbDB2315678afecb367f032d93F642f64180aa3",
                  "receiver": "0x01000002147a6a3C44CdDdB6a900fa2b585dd299e03d12FA4293BC"
                }
              ]
            },
            "integrityChecksum": "hmac-sha256:a1b2c3d4e5f6...",
            "orders": [
              {
                "domain": "0x01000002147a69000000000022d473030f116ddee9f6b43ac78ba3",
                "message": {
                  "digest": "0xdfbfeb9aed6340d513ef52f716cef5b50b677118d364c8448bff1c9ea9fd0b14"
                },
                "primaryType": "PermitBatchWitnessTransferFrom",
                "signatureType": "eip712"
              }
            ],
            "provider": "Example Solver v1.0",
            "quoteId": "6a22e92f-3e5d-4f05-ab5f-007b01e58b21",
            "solverId": "example-solver"
          },
          "signature": "0x1234567890abcdef...",
          "sponsor": "0x70997970c51812dc3a010c7d01b50e0d17dc79c8"
        }
      },
      "OrderResponse": {
        "type": "object",
        "description": "Response body for /v1/orders endpoint (order submission)",
        "required": [
          "orderId",
          "status",
          "createdAt",
          "updatedAt",
          "inputAmount",
          "outputAmount",
          "settlement"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the response was created"
          },
          "fillTransaction": {
            "description": "Fill transaction information"
          },
          "inputAmount": {
            "$ref": "#/components/schemas/AssetAmount",
            "description": "Input amount"
          },
          "orderId": {
            "type": "string",
            "description": "The order ID"
          },
          "outputAmount": {
            "$ref": "#/components/schemas/AssetAmount",
            "description": "Output amount"
          },
          "quoteId": {
            "type": [
              "string",
              "null"
            ],
            "description": "Quote ID"
          },
          "settlement": {
            "$ref": "#/components/schemas/Settlement",
            "description": "Settlement information"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "description": "Current status of the order"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the response was last updated"
          }
        },
        "additionalProperties": false
      },
      "OrderStatus": {
        "type": "string",
        "description": "Order execution status",
        "enum": [
          "created",
          "pending",
          "executed",
          "settled",
          "finalized",
          "failed"
        ]
      },
      "QuoteDetails": {
        "type": "object",
        "description": "Quote details matching the request structure",
        "required": [
          "requestedOutputs",
          "availableInputs"
        ],
        "properties": {
          "availableInputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableInput"
            },
            "description": "Available inputs for this quote"
          },
          "requestedOutputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedOutput"
            },
            "description": "Requested outputs for this quote"
          }
        },
        "additionalProperties": false
      },
      "QuoteOrder": {
        "type": "object",
        "description": "EIP-712 compliant order structure",
        "required": [
          "signatureType",
          "domain",
          "primaryType",
          "message"
        ],
        "properties": {
          "domain": {
            "$ref": "#/components/schemas/InteropAddress",
            "description": "ERC-7930 interoperable address of the domain"
          },
          "message": {
            "description": "Message object to be signed and submitted"
          },
          "primaryType": {
            "type": "string",
            "description": "Primary type for EIP-712 signing"
          },
          "signatureType": {
            "$ref": "#/components/schemas/SignatureType",
            "description": "Signature type (eip-712 or erc-3009)"
          }
        },
        "additionalProperties": false
      },
      "QuotePreference": {
        "type": "string",
        "description": "Quote optimization preferences following UII standard",
        "enum": [
          "price",
          "speed",
          "inputPriority",
          "trustMinimization"
        ]
      },
      "QuoteRequest": {
        "type": "object",
        "description": "API request body for /v1/quotes endpoint",
        "required": [
          "user",
          "availableInputs",
          "requestedOutputs"
        ],
        "properties": {
          "availableInputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableInput"
            },
            "description": "Available inputs (order significant if preference is 'input-priority')"
          },
          "minValidUntil": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Minimum quote validity duration in seconds",
            "minimum": 0
          },
          "preference": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/QuotePreference",
                "description": "User preference for optimization"
              }
            ]
          },
          "requestedOutputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedOutput"
            },
            "description": "Requested outputs"
          },
          "solverOptions": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SolverOptions",
                "description": "Solver options"
              }
            ]
          },
          "user": {
            "$ref": "#/components/schemas/InteropAddress",
            "description": "User making the request in ERC-7930 interoperable format"
          }
        },
        "additionalProperties": false,
        "example": {
          "availableInputs": [
            {
              "amount": "1000000000000000000",
              "asset": "0x01000002147a695FbDB2315678afecb367f032d93F642f64180aa3",
              "user": "0x01000002147a6970997970C51812dc3A010C7d01b50e0d17dc79C8"
            }
          ],
          "minValidUntil": 600,
          "preference": "speed",
          "requestedOutputs": [
            {
              "amount": "1000000000000000000",
              "asset": "0x01000002147a6a5FbDB2315678afecb367f032d93F642f64180aa3",
              "receiver": "0x01000002147a6a3C44CdDdB6a900fa2b585dd299e03d12FA4293BC"
            }
          ],
          "solverOptions": {
            "solverTimeout": 2000,
            "timeout": 4000
          },
          "user": "0x01000002147a6970997970C51812dc3A010C7d01b50e0d17dc79C8"
        }
      },
      "QuoteResponse": {
        "type": "object",
        "description": "Response format for individual quotes in the API",
        "required": [
          "quoteId",
          "solverId",
          "orders",
          "details",
          "provider",
          "integrityChecksum"
        ],
        "properties": {
          "details": {
            "$ref": "#/components/schemas/QuoteDetails",
            "description": "Quote details matching request structure"
          },
          "eta": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Estimated time to completion in seconds",
            "minimum": 0
          },
          "integrityChecksum": {
            "type": "string",
            "description": "HMAC-SHA256 integrity checksum for quote verification\nThis ensures the quote originated from the aggregator service"
          },
          "metadata": {
            "description": "Adapter-specific metadata for additional context and execution details\nThis field allows each adapter to include protocol-specific information\nthat consumers might need for order execution or additional context"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteOrder"
            },
            "description": "Array of EIP-712 compliant orders"
          },
          "provider": {
            "type": "string",
            "description": "Provider identifier"
          },
          "quoteId": {
            "type": "string",
            "description": "Unique identifier for the quote"
          },
          "solverId": {
            "type": "string",
            "description": "ID of the solver that provided this quote"
          },
          "validUntil": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Quote validity timestamp",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "example": {
          "details": {
            "requestedOutputs": [
              {
                "amount": "1000000000000000000",
                "asset": "0x01000002147a6a5FbDB2315678afecb367f032d93F642f64180aa3",
                "receiver": "0x01000002147a6a3C44CdDdB6a900fa2b585dd299e03d12FA4293BC"
              }
            ]
          },
          "eta": 30,
          "integrityChecksum": "hmac-sha256:a1b2c3d4e5f6...",
          "orders": [
            {
              "domain": "0x01000002147a69000000000022d473030f116ddee9f6b43ac78ba3",
              "message": {
                "deadline": "1756457492",
                "digest": "0xdfbfeb9aed6340d513ef52f716cef5b50b677118d364c8448bff1c9ea9fd0b14",
                "nonce": "1756457192541"
              },
              "primaryType": "PermitBatchWitnessTransferFrom",
              "signatureType": "eip712"
            }
          ],
          "provider": "Example Solver v1.0",
          "quoteId": "6a22e92f-3e5d-4f05-ab5f-007b01e58b21",
          "solverId": "example-solver",
          "validUntil": 1756457492
        }
      },
      "QuotesResponse": {
        "type": "object",
        "description": "Collection of quotes response for API endpoints",
        "required": [
          "quotes",
          "totalQuotes"
        ],
        "properties": {
          "metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AggregationMetadata",
                "description": "Optional metadata about the aggregation process"
              }
            ]
          },
          "quotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteResponse"
            }
          },
          "totalQuotes": {
            "type": "integer",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "example": {
          "metadata": {
            "earlyTermination": false,
            "globalTimeoutMs": 4000,
            "minQuotesRequired": 30,
            "solverSelectionMode": "all",
            "solverTimeoutMs": 2000,
            "solversQueried": 2,
            "solversRespondedError": 0,
            "solversRespondedSuccess": 1,
            "solversTimedOut": 1,
            "totalDurationMs": 1500,
            "totalSolversAvailable": 2
          },
          "quotes": [
            {
              "details": {
                "requestedOutputs": [
                  {
                    "amount": "1000000000000000000",
                    "asset": "0x01000002147a6a5FbDB2315678afecb367f032d93F642f64180aa3",
                    "receiver": "0x01000002147a6a3C44CdDdB6a900fa2b585dd299e03d12FA4293BC"
                  }
                ]
              },
              "eta": 30,
              "integrityChecksum": "hmac-sha256:a1b2c3d4e5f6...",
              "orders": [
                {
                  "domain": "0x01000002147a69000000000022d473030f116ddee9f6b43ac78ba3",
                  "message": {
                    "digest": "0xdfbfeb9aed6340d513ef52f716cef5b50b677118d364c8448bff1c9ea9fd0b14"
                  },
                  "primaryType": "PermitBatchWitnessTransferFrom",
                  "signatureType": "eip712"
                }
              ],
              "provider": "Example Solver v1.0",
              "quoteId": "6a22e92f-3e5d-4f05-ab5f-007b01e58b21",
              "solverId": "example-solver",
              "validUntil": 1756457492
            }
          ],
          "totalQuotes": 1
        }
      },
      "RequestedOutput": {
        "type": "object",
        "description": "Requested output with receiver and optional calldata",
        "required": [
          "receiver",
          "asset",
          "amount"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/U256",
            "description": "Amount as a big integer"
          },
          "asset": {
            "$ref": "#/components/schemas/InteropAddress",
            "description": "Asset address in ERC-7930 interoperable format"
          },
          "calldata": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional calldata for the output"
          },
          "receiver": {
            "$ref": "#/components/schemas/InteropAddress",
            "description": "Receiver address in ERC-7930 interoperable format"
          }
        },
        "additionalProperties": false
      },
      "Settlement": {
        "type": "object",
        "description": "Order\nSettlement information for an order",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "description": "Settlement-specific data"
          },
          "type": {
            "$ref": "#/components/schemas/SettlementType",
            "description": "Settlement mechanism type"
          }
        },
        "additionalProperties": false
      },
      "SettlementType": {
        "type": "string",
        "description": "Settlement mechanism types",
        "enum": [
          "escrow",
          "resourceLock"
        ]
      },
      "SignatureType": {
        "type": "string",
        "description": "Supported signature types",
        "enum": [
          "eip712",
          "erc3009"
        ]
      },
      "SolverOptions": {
        "type": "object",
        "description": "API request body for /v1/quotes endpoint",
        "properties": {
          "excludeSolvers": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "Solver IDs to exclude from query"
          },
          "includeSolvers": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "Solver IDs to include (overrides circuit breaker Open state with warning)"
          },
          "minQuotes": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Minimum number of valid quotes required before responding",
            "minimum": 0
          },
          "priorityThreshold": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Min solver confidence threshold",
            "minimum": 0
          },
          "sampleSize": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Max solvers to query in 'sampled' mode",
            "minimum": 0
          },
          "solverSelection": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SolverSelection",
                "description": "Solver selection strategy"
              }
            ]
          },
          "solverTimeout": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Per-solver timeout (ms) for individual quote responses",
            "minimum": 0
          },
          "timeout": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Overall request timeout (ms) for POST /quotes",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "example": {
          "includeSolvers": [
            "example-solver"
          ],
          "minQuotes": 1,
          "solverSelection": "all",
          "solverTimeout": 2000,
          "timeout": 4000
        }
      },
      "SolverResponse": {
        "type": "object",
        "description": "Response format for individual solvers in API",
        "required": [
          "solverId",
          "adapterId",
          "endpoint",
          "status",
          "supportedAssets",
          "createdAt"
        ],
        "properties": {
          "adapterId": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "endpoint": {
            "type": "string"
          },
          "lastSeen": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "solverId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SolverStatus"
          },
          "supportedAssets": {
            "$ref": "#/components/schemas/SupportedAssetsResponse"
          }
        },
        "additionalProperties": false,
        "example": {
          "adapterId": "oif-adapter-v1",
          "createdAt": 1756400000,
          "description": "An example solver for cross-chain swaps",
          "endpoint": "https://api.example-solver.com",
          "lastSeen": 1756457492,
          "name": "Example DeFi Solver",
          "solverId": "example-solver",
          "status": "active",
          "supportedAssets": {
            "routes": [
              {
                "destinationChainId": 10,
                "destinationTokenAddress": "0x4200000000000000000000000000000000000006",
                "destinationTokenSymbol": "WETH",
                "originChainId": 1,
                "originTokenAddress": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                "originTokenSymbol": "WETH"
              }
            ],
            "source": "autoDiscovered",
            "type": "routes"
          }
        }
      },
      "SolverSelection": {
        "type": "string",
        "enum": [
          "all",
          "sampled",
          "priority"
        ]
      },
      "SolverStats": {
        "type": "object",
        "description": "Solver statistics for health checks and monitoring",
        "required": [
          "total",
          "active",
          "inactive",
          "healthy",
          "unhealthy",
          "healthDetails"
        ],
        "properties": {
          "active": {
            "type": "integer",
            "minimum": 0
          },
          "healthDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "healthy": {
            "type": "integer",
            "minimum": 0
          },
          "inactive": {
            "type": "integer",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "unhealthy": {
            "type": "integer",
            "minimum": 0
          }
        },
        "example": {
          "active": 2,
          "healthDetails": {
            "down-solver": false,
            "example-solver": true,
            "uniswap-solver": true
          },
          "healthy": 2,
          "inactive": 1,
          "total": 3,
          "unhealthy": 1
        }
      },
      "SolverStatus": {
        "type": "string",
        "description": "Solver operational status",
        "enum": [
          "active",
          "inactive",
          "error",
          "maintenance",
          "initializing"
        ]
      },
      "SolversResponse": {
        "type": "object",
        "description": "Collection of solvers response for API endpoints",
        "required": [
          "solvers",
          "totalSolvers"
        ],
        "properties": {
          "solvers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolverResponse"
            }
          },
          "totalSolvers": {
            "type": "integer",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "example": {
          "solvers": [
            {
              "adapterId": "oif-adapter-v1",
              "createdAt": 1756400000,
              "description": "An example solver for cross-chain swaps",
              "endpoint": "https://api.example-solver.com",
              "lastSeen": 1756457492,
              "name": "Example DeFi Solver",
              "solverId": "example-solver",
              "status": "active",
              "supportedAssets": {
                "assets": [
                  {
                    "address": "0x01000002147a695FbDB2315678afecb367f032d93F642f64180aa3",
                    "chainId": 1,
                    "decimals": 6,
                    "name": "USD Coin",
                    "symbol": "USDC"
                  }
                ],
                "source": "autoDiscovered",
                "type": "assets"
              }
            },
            {
              "adapterId": "uniswap-adapter-v1",
              "createdAt": 1756400000,
              "description": "Uniswap V3 liquidity pools solver",
              "endpoint": "https://api.uniswap.solver.com",
              "lastSeen": 1756457490,
              "name": "Uniswap V3 Solver",
              "solverId": "uniswap-solver",
              "status": "active",
              "supportedAssets": {
                "routes": [
                  {
                    "destinationChainId": 137,
                    "destinationTokenAddress": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                    "destinationTokenSymbol": "WETH",
                    "originChainId": 1,
                    "originTokenAddress": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                    "originTokenSymbol": "WETH"
                  }
                ],
                "source": "config",
                "type": "routes"
              }
            }
          ],
          "totalSolvers": 2
        }
      },
      "StorageHealthInfo": {
        "type": "object",
        "description": "Storage health information",
        "required": [
          "healthy",
          "backend"
        ],
        "properties": {
          "backend": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean"
          }
        },
        "example": {
          "backend": "memory",
          "healthy": true
        }
      },
      "SupportedAssetsResponse": {
        "oneOf": [
          {
            "type": "object",
            "description": "Asset-based: supports any-to-any within asset list (including same-chain)",
            "required": [
              "assets",
              "source",
              "type"
            ],
            "properties": {
              "assets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Asset"
                }
              },
              "source": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "assets"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Route-based: supports specific origin->destination pairs",
            "required": [
              "routes",
              "source",
              "type"
            ],
            "properties": {
              "routes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetRouteResponse"
                }
              },
              "source": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "routes"
                ]
              }
            }
          }
        ],
        "description": "Supported assets response format for API"
      },
      "U256": {
        "type": "string",
        "description": "U256 value represented as a string to preserve precision\n\nUsed for handling large integer values that might overflow native integer types"
      }
    }
  },
  "tags": [
    {
      "name": "quotes",
      "description": "Request and manage price quotes from multiple solvers for cross-chain transactions"
    },
    {
      "name": "orders",
      "description": "Submit, track, and manage cross-chain orders through the aggregator"
    },
    {
      "name": "health",
      "description": "System health checks and diagnostics for monitoring service status"
    },
    {
      "name": "solvers",
      "description": "Discover and interact with available solvers and their capabilities"
    }
  ]
}